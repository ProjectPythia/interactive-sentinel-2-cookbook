{"version":"1","records":[{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard"},"type":"lvl1","url":"/","position":0},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard"},"content":"\n\n\n\n\n\n\nThis Project Pythia Cookbook provides a recipe for building an interactive dashboard for the Sentinel-2 L2A satellite imagery using the holoviews ecosystem.","type":"content","url":"/","position":1},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl2":"Authors"},"type":"lvl2","url":"/#authors","position":2},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl2":"Authors"},"content":"Pritam Das","type":"content","url":"/#authors","position":3},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl3":"Contributors","lvl2":"Authors"},"type":"lvl3","url":"/#contributors","position":4},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl3":"Contributors","lvl2":"Authors"},"content":"","type":"content","url":"/#contributors","position":5},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl2":"Structure"},"type":"lvl2","url":"/#structure","position":6},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl2":"Structure"},"content":"This cookbook currently has one recipe in the Introduction section.","type":"content","url":"/#structure","position":7},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl2":"Running the Notebooks"},"type":"lvl2","url":"/#running-the-notebooks","position":8},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl2":"Running the Notebooks"},"content":"You can either run the notebook using \n\nBinder or on your local machine.","type":"content","url":"/#running-the-notebooks","position":9},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-binder","position":10},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl3":"Running on Binder","lvl2":"Running the Notebooks"},"content":"The simplest way to interact with a Jupyter Notebook is through\n\n\nBinder, which enables the execution of a\n\n\nJupyter Book in the cloud. The details of how this works are not\nimportant for now. All you need to know is how to launch a Pythia\nCookbooks chapter via Binder. Simply navigate your mouse to\nthe top right corner of the book chapter you are viewing and click\non the rocket ship icon, (see figure below), and be sure to select\n“launch Binder”. After a moment you should be presented with a\nnotebook that you can interact with. I.e. you’ll be able to execute\nand even change the example programs. You’ll see that the code cells\nhave no output at first, until you execute them by pressing\nShift+Enter. Complete details on how to interact with\na live Jupyter notebook are described in \n\nGetting Started with\nJupyter.","type":"content","url":"/#running-on-binder","position":11},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"type":"lvl3","url":"/#running-on-your-own-machine","position":12},{"hierarchy":{"lvl1":"Sentinel-2 L2A Interactive Dashboard","lvl3":"Running on Your Own Machine","lvl2":"Running the Notebooks"},"content":"If you are interested in running this material locally on your computer, you will need to follow this workflow:\n\nClone the https://github.com/pritamd47/interactive-sentinel-2 repository: git clone https://github.com/pritamd47/interactive-sentinel-2.git\n\nMove into the cookbook-example directorycd interactive-sentinel-2\n\nCreate and activate your conda environment from the environment.yml fileconda env create -f environment.yml\nconda activate interactive-sentinel-2\n\nMove into the notebooks directory and start up Jupyterlabcd notebooks/\njupyter lab","type":"content","url":"/#running-on-your-own-machine","position":13},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery"},"type":"lvl1","url":"/notebooks/data-intake-ms-planetary-computer","position":0},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery"},"content":"\n\n","type":"content","url":"/notebooks/data-intake-ms-planetary-computer","position":1},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Overview"},"type":"lvl3","url":"/notebooks/data-intake-ms-planetary-computer#overview","position":2},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Overview"},"content":"In this notebook, we will take a look at how to retrieve Sentinel-2 L2A satellite imagery from the \n\nMicrosoft Planetary Computer Data Catalog (MSPC). We will go over how to interact with the Data Catalog, which exposes a \n\nSpatioTemporal Asset Catalog (STAC) interface for querying, searching and retrieving data. We will use the \n\nodc-stac package to load the data lazily, which means data is not actually read unless required (say, for plotting). Once loaded, we will process the data and make a simple interactive dashboard to look at the satellite imagery over a location for different seasons. We will use the \n\nHoloViz ecosystem for the interactive dashboard.\n\n","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#overview","position":3},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Prerequisites"},"type":"lvl3","url":"/notebooks/data-intake-ms-planetary-computer#prerequisites","position":4},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Prerequisites"},"content":"Concepts\n\nImportance\n\nNotes\n\nXarray\n\nHelpful\n\nBackground\n\nDask + Xarray\n\nNecessary\n\nBackground\n\nAbout the Microsoft Planetary Computer (MSPC)\n\nHelpful\n\nBackground\n\nDocumentation of pystac-client\n\nHelpful\n\nConsult as needed\n\nLandsat ML Cookbook\n\nHelpful\n\nSimilar cookbook, illustrates accessing Landsat data from MSPC\n\nAbout the HoloViz ecosystem\n\nHelpful\n\nHow different HoloViz packages work with each other\n\nSentinel-2 L2A User Guide\n\nNecessary\n\nBackground about the satellite data\n\nSentinel-2 L2A data definitions\n\nHelpful\n\nSection 2.3.10 has some useful information about the data we access in this cookbook\n\nTime to learn: 15 minutes\n\n","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#prerequisites","position":5},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Imports"},"type":"lvl3","url":"/notebooks/data-intake-ms-planetary-computer#imports","position":6},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Imports"},"content":"\n\nimport os\nimport pandas as pd\nimport numpy as np\nimport xarray as xr\nimport pystac_client\nimport planetary_computer\nimport panel as pn\nimport panel.widgets as pnw\nimport hvplot.xarray\nimport holoviews as hv\nimport geoviews as gv\nfrom pystac.extensions.eo import EOExtension as eo\nimport datetime\nfrom cartopy import crs\nfrom dask.distributed import Client, LocalCluster\nimport odc.stac\n\nxr.set_options(keep_attrs=True)\nhv.extension('bokeh')\ngv.extension('bokeh')\n\nSince we will use dask to distribute our computation, we can create a dask cluster and connect to it via a dask client. For this recipe, we will create a \n\nLocalCluster with default values.\n\ncluster = LocalCluster()\nclient = Client(cluster)\nclient\n\n","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#imports","position":7},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl2":"Open the catalog"},"type":"lvl2","url":"/notebooks/data-intake-ms-planetary-computer#open-the-catalog","position":8},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl2":"Open the catalog"},"content":"\n\nThe root of Microsoft Planetary Computer’s STAC API endpoint is located at \n\nhttps://​planetarycomputer​.microsoft​.com​/api​/stac​/v1. We will load in the catalog using the pystac_client.Client.open method. Even though the STAC metadata in MSPC is publicly accessible, authentication is required to access the actual data. The modifier keyword can be used to explicitly “sign” an item, which basically means we can access the privately stored data (more information \n\nhere).\n\nstac_root = 'https://planetarycomputer.microsoft.com/api/stac/v1'\ncatalog = pystac_client.Client.open(\n    stac_root,\n    modifier=planetary_computer.sign_inplace\n)\nprint(f\"{catalog.title} - {catalog.description}\")\n\nLet’s search for any collections that have the substring “sentinel-2” in it to discover the sentinel-2 data.\n\nsentinel2_collections = [collection for collection in catalog.get_collections() if \"sentinel-2\" in collection.id]\nsentinel2_collections\n\nLooks like there is only one collection (sentinel-2-l2a) available in the catalog - which is the dataset we want to use.\n\n","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#open-the-catalog","position":9},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl2":"Query, Filter and Load the collection"},"type":"lvl2","url":"/notebooks/data-intake-ms-planetary-computer#query-filter-and-load-the-collection","position":10},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl2":"Query, Filter and Load the collection"},"content":"\n\nNow that we have the ID of the collection of interest, we can specify certain filters to narrow down to exactly the data we want to look at. The final visualization in the recipe will look at how the NCAR Mesa Lab, Boulder CO looks like throughout the year as seen from space. To narrow down our search, we will use the following criteria -\n\nBounding box: We will limit our spatial extent to the bounding box of the NCAR Mesa Lab region.\n\nDate range: We will look at the year 2022\n\nCollection: sentinel-2-l2a (from previous cell)\n\nCloud threshold: Since cloud can block the satellite from making an observation of the ground, we will limit our search to satellite images where the cloud cover is less than a certain threshold, 40% in this case.\n\nFeel free to change these filtering paramters to suit your needs when running in an interactive session.\n\nbbox = [-105.283263,39.972809,-105.266569,39.987640] # NCAR, boulder, CO. bbox from http://bboxfinder.com/\ndate_range = \"2022-01-01/2022-12-31\"\ncollection = \"sentinel-2-l2a\"                        # full id of collection\ncloud_thresh = 30\n\nsearch = catalog.search(\n    collections = sentinel2_collections,\n    bbox = bbox,\n    datetime = date_range,\n    query={\"eo:cloud_cover\": {\"lt\": cloud_thresh}}\n)\nitems = search.item_collection()\nprint(f\"Found {len(items)} items in the {collection}\")\n\nWe now have an ItemCollection with the data that we need. Let’s look at one of the items in the collection and explore what assets it has.\n\nfirst_item = items.items[0]\nall_bands = list(first_item.assets.keys())\nprint(\"Assets available:\")\nprint(*all_bands, sep=', ')\n\nSeems like there are a lot of assets associated with the item - you can read about them \n\nhere. We are interested in the assets that start with a ‘B’, which are the bands associated with the different spectral bands in which the \n\nMultiSpectral Instrument (MSI) of the satellite captures observations. Specifically, the RGB – or Red, Green and Blue - bands that we need to create a “True color” image are as follows:\n\nband\n\ncorresponds to\n\nB04\n\nRed\n\nB03\n\nGreen\n\nB02\n\nBlue\n\nWe will use the odc.stac.stac_load function to load in the assets that start with the alphabet ‘B’. This function will return a lazily-loaded xr.DataSet (using dask). For plotting purposes it is better if we have the data as a xr.DataArray instead with the bands as a dimension. We can do that using .to_array(dim=<dim_name>) method of a dataset.\n\nbands_of_interest = [b for b in all_bands if b.startswith('B')]\n\nda = odc.stac.stac_load(\n    items,\n    bands=bands_of_interest,\n    bbox=bbox,\n    chunks={},  # <-- use Dask\n).to_array(dim='band')\nda\n\n","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#query-filter-and-load-the-collection","position":11},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Prepare the data for visualization","lvl2":"Query, Filter and Load the collection"},"type":"lvl3","url":"/notebooks/data-intake-ms-planetary-computer#prepare-the-data-for-visualization","position":12},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Prepare the data for visualization","lvl2":"Query, Filter and Load the collection"},"content":"\n\nOn January 25th, 2022, the European Space Agency (data provider for Sentinel-2 satellite) made a change in their processing pipeline to address some issues that you can read about \n\nhere if interested. For the purpose of this notebook, we will process the newer dataset such that it is harmonized with the old processing pipeline - in simple words, we will make sure that the data has the same statistical properties so that we can visualize them seamlessly.\n\n# from https://planetarycomputer.microsoft.com/dataset/sentinel-2-l2a#Baseline-Change\ndef harmonize_to_old(data):  \n    \"\"\"\n    Harmonize new Sentinel-2 data to the old baseline.\n\n    Parameters\n    ----------\n    data: xarray.DataArray\n        A DataArray with four dimensions: time, band, y, x\n\n    Returns\n    -------\n    harmonized: xarray.DataArray\n        A DataArray with all values harmonized to the old\n        processing baseline.\n    \"\"\"\n    cutoff = datetime.datetime(2022, 1, 25)\n    offset = 1000\n    bands = [\"B01\",\"B02\",\"B03\",\"B04\",\"B05\",\"B06\",\"B07\",\"B08\",\"B8A\",\"B09\",\"B10\",\"B11\",\"B12\"]\n\n    old = data.sel(time=slice(cutoff))\n\n    to_process = list(set(bands) & set(data.band.data.tolist()))\n    new = data.sel(time=slice(cutoff, None)).drop_sel(band=to_process)\n\n    new_harmonized = data.sel(time=slice(cutoff, None), band=to_process).clip(offset)\n    new_harmonized -= offset\n\n    new = xr.concat([new, new_harmonized], \"band\").sel(band=data.band.data.tolist())\n    return xr.concat([old, new], dim=\"time\")\n\nda = harmonize_to_old(da)\nda\n\nNow that we have a harmonized dataset, we still need to process the data as follows:\n\nSentinel-2 L2A provides the Surface Reflectance (SR) data, which usually ranges from 0 (no reflection) to 1.0 (complete reflection). However, the actual values in the loaded dataset ranges from 0 to ~10,000. These data values need to be scaled to 0.0-1.0 by dividing the data by 10,000. More details can be found in \n\nsection 2.3.10 of this document.\n\nWe will then explicitly trigger the dask computation using the compute() method and load the result into memory. This is to reduce repeated calls to retrieve data from MSPC. By loading the processed  This wouldn’t have been possible if the dataset was large.\n\nda = da / 1e4   # Scale data values from 0:10000 to 0:1.0\nda = da / da.max(dim='band')  # additionally scale from 0-max -> 0-1 for visual quality\nda = da.compute()\n\nWe have now processed the data so that we can visualize it!\n\nLet’s look at the Blue, Green and Red bands.\n\ndef plot_band(band, cmap):\n    return da.sel(band=band).isel(time=0).hvplot(\n        x='x', y='y', data_aspect=1, \n        cmap=cmap, geo=True, tiles='ESRI', \n        crs=crs.epsg(items[0].properties['proj:epsg']), rasterize=True,\n        title=f\"band: {band}, cmap: {cmap}\",\n        clabel='surface reflectance [0.0-1.0]'\n    ).opts(\n        frame_width=300,\n        xlabel='longitude',\n        ylabel='latitude',\n        \n    )\n\n(plot_band('B04', 'Blues') + plot_band('B03', 'Greens') + plot_band('B02', 'Reds')).cols(2)\n\nLet us make a dashboard composed of 4 different interactive plots showing the RGB view of the satellite observation for four different seasons.\nWe need a function that will take a time input and does the following tasks:\n\nplot an interactive RGB image of the data and overlay it on a map of the world.\n\nprovide a \n\ndate slider widget which can be used to interact with the plot.\n\nonly set the default value of the date slider to the time, but allow the user to slide through the length of the entire dataset.\n\nUsing this function, we will be able to compose the dashboard.\n\ndef rgb_during(time):\n    season_names = {\n        1: 'Winter',\n        2: 'Spring',\n        3: 'Summer',\n        4: 'Fall'\n    }\n    da_rgb = da.sel(band=['B04', 'B03', 'B02'])\n    start_date = pd.to_datetime(da_rgb['time'].min().data).to_pydatetime()\n    end_date = pd.to_datetime(da_rgb['time'].max().data).to_pydatetime()\n    closest_date = pd.to_datetime(da_rgb.sel(time=time, method='nearest').time.data).to_pydatetime()\n    dt_slider = pnw.DateSlider(name='Date', start=start_date, end=end_date, value=closest_date)\n    \n    def get_obs_on(t):\n        season_key = [month%12 // 3 + 1 for month in range(1, 13)][t.month-1]\n        season = season_names[season_key]\n        return da.sel(band=['B04', 'B03', 'B02']).sel(time=t, method='nearest').transpose('y', 'x', 'band').hvplot.rgb(\n            x='x', y='y', bands='band', \n            geo=True, tiles='ESRI', crs=crs.epsg(items[0].properties['proj:epsg']), \n            rasterize=True, title=f\"{season}: {t.strftime('%Y-%m-%d')}\"\n        ).opts(\n            frame_width=300,\n            xlabel='longitude',\n            ylabel='latitude',\n        )\n        \n    \n    return pn.panel(pn.Column(\n                pn.bind(get_obs_on, t=dt_slider), \n                pn.Row(\n                    pn.Spacer(width=60),\n                    dt_slider,\n                )\n            ))\n\nrgb_during('2022-02-01')\n\nLet’s now compose a dashboard using panel.\n\nwinter = '2022-01-15'\nspring = '2022-04-30'\nsummer = '2022-08-01'\nfall = '2022-09-15'\n\nwinter_plot = rgb_during(winter)\nspring_plot = rgb_during(spring)\nsummer_plot = rgb_during(summer)\nfall_plot = rgb_during(fall)\n\npn.Column(\n    pn.Row(winter_plot, spring_plot),\n    pn.Row(summer_plot, fall_plot)\n)\n\n","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#prepare-the-data-for-visualization","position":13},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Summary","lvl2":"Query, Filter and Load the collection"},"type":"lvl3","url":"/notebooks/data-intake-ms-planetary-computer#summary","position":14},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Summary","lvl2":"Query, Filter and Load the collection"},"content":"In this recipe, we looked at how to access Sentinel-2 satellite data over a region of interest and create an interactive dashboard to visualize the data.","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#summary","position":15},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl4":"What’s next?","lvl3":"Summary","lvl2":"Query, Filter and Load the collection"},"type":"lvl4","url":"/notebooks/data-intake-ms-planetary-computer#whats-next","position":16},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl4":"What’s next?","lvl3":"Summary","lvl2":"Query, Filter and Load the collection"},"content":"We plotted the RGB or True color image of our region of interest using a subset of all the bands available. We can further calculate useful indices, such as the \n\nNormalized Difference Snow Index (NDSI) or the \n\nNormalized Difference Vegetation Index.","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#whats-next","position":17},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Resources and references","lvl2":"Query, Filter and Load the collection"},"type":"lvl3","url":"/notebooks/data-intake-ms-planetary-computer#resources-and-references","position":18},{"hierarchy":{"lvl1":"Interactive dashboard for Sentinel-2 satellite imagery","lvl3":"Resources and references","lvl2":"Query, Filter and Load the collection"},"content":"Authored by Pritam Das (\n\n), June 2023 during Project Pythia cookoff 2023.\n\nThis notebook takes a lot of inspiration from the \n\nLandsat ML Cookbook by Demetris Roumis.\n\nThis notebook uses concepts and code illustrated in the \n\nReading Data from the STAC API.","type":"content","url":"/notebooks/data-intake-ms-planetary-computer#resources-and-references","position":19},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"type":"lvl1","url":"/notebooks/how-to-cite","position":0},{"hierarchy":{"lvl1":"How to Cite This Cookbook"},"content":"The material in Project Pythia’s This Cookbook is licensed for free and open consumption and reuse. All code is served under \n\nApache 2.0, while all non-code content is licensed under \n\nCreative Commons BY 4.0 (CC BY 4.0). Effectively, this means you are free to share and adapt this material so long as you give appropriate credit to the Cookbook authors and the Project Pythia community.\n\nThe source code for the book is \n\nreleased on GitHub and archived on Zenodo. This DOI will always resolve to the latest release of the book source: \n\n","type":"content","url":"/notebooks/how-to-cite","position":1}]}